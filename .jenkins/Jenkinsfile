pipeline {
    agent any

    environment {
        GITHUB_BOT_TOKEN = credentials('github-bot-token')
    }

    stages {
        stage('Read parameters file') {
            steps {
                script {
                    if (fileExists('parameters.txt')) {
                        // Read the file
                        def fileContent = readFile('parameters.txt').trim()

                        // Split the file content into lines
                        def lines = fileContent.split("\n")

                        // Iterate over the lines and set the environment variables
                        lines.each { line ->
                            def parts = line.split('=')
                            if (parts.size() == 2) {
                                env[parts[0]] = parts[1]
                            }
                        }

                        echo "Artifact URL Win: ${env.artifact_url_win}"
                        echo "Artifact URL Mac: ${env.artifact_url_mac}"
                        echo "Version: ${env.version}"
                    } else {
                        echo "Error: parameters.txt does not exist."
                    }
                }
            }
        }

        stage('Download and unpack Windows artifact') {
            steps {
                script {
                    sh "curl -L -H 'Accept: application/vnd.github.v3+json' \
                        -H 'Authorization: Bearer ${GITHUB_BOT_TOKEN}' \
                        '${env.artifact_url_win}' \
                        --output 'aspect-model-editor-v${env.version}-win.zip'"
                    sh "mkdir -p unpack_dir"
                    sh "unzip -o aspect-model-editor-v${env.version}-win.zip -d unpack_dir"
                    sh "ls -a unpack_dir"
                }
            }
        }

        stage('Sign Windows Applications') {
            steps {
                script {
                    sh "mkdir -p signed_dir"
                    sh "find unpack_dir -name '*.dll' -exec mv {} signed_dir \\;"
                    sh "curl -o signed_dir/ame-backend-${env.version}-win.exe -F file=@unpack_dir/ame-backend-${env.version}-win.exe https://cbi.eclipse.org/authenticode/sign"
                    sh "zip -r aspect-model-editor-v${env.version}-win-signed.zip signed_dir"
                    sh "ls -a signed_dir"
                }
            }
        }

        stage('Download Mac artifact') {
            steps {
                script {
                    sh "curl -L -H 'Accept: application/vnd.github.v3+json' \
                        -H 'Authorization: Bearer ${GITHUB_BOT_TOKEN}' \
                        '${env.artifact_url_mac}' \
                        --output 'aspect-model-editor-v${env.version}-mac.zip'"
                    sh "unzip -o aspect-model-editor-v${env.version}-mac.zip -d unpack_dir"
                    sh "ls -a unpack_dir"
                }
            }
        }

        stage('Create MacOS .app structure') {
            steps {
                script {
                    sh '''
                    # Create the .app structure
                    mkdir -p "AspectModelEditorBackend.app/Contents/MacOS"
        
                    # Move the downloaded file into the MacOS folder
                    mv "unpack_dir/ame-backend-\${env.version}-mac" "AspectModelEditorBackend.app/Contents/MacOS/"
        
                    # Set the executable permission
                    chmod +x "AspectModelEditorBackend.app/Contents/MacOS/ame-backend-\${env.version}-mac"
        
                    # Create a basic Info.plist file
                    cat << EOF > MyApp.app/Contents/Info.plist
                    <?xml version="1.0" encoding="UTF-8"?>
                    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                    <plist version="1.0">
                        <dict>
                            <key>CFBundleIdentifier</key>
                            <string>org.eclipse.ame</string>
                            <key>CFBundleName</key>
                            <string>AspectModelEditorBackend</string>
                            <key>CFBundleVersion</key>
                            <string>\${env.version}</string>
                            <key>CFBundlePackageType</key>
                            <string>APPL</string>
                            <key>CFBundleExecutable</key>
                            <string>start.sh</string>
                        </dict>
                    </plist>
                    EOF
                                
                    # Create start.sh file
                    cat << EOF > AspectModelEditorBackend.app/Contents/MacOS/start.sh
                    #!/bin/bash
        
                    # Absolute path to the main executable
                    APP_PATH="\\$(dirname "\\$0")/ame-backend-\${env.version}-mac"
        
                    # AppleScript that opens a new Terminal window and runs the application
                    osascript <<EOS
                    tell application "Terminal"
                        do script "cd '\\$(dirname "\\$APP_PATH")'; ./\\$(basename "\\$APP_PATH"); exit"
                        activate
                    end tell
                    EOS
                    EOF
        
                    # Set the executable permission for start.sh
                    chmod +x "AspectModelEditorBackend.app/Contents/MacOS/start.sh"
                    '''
                }
            }
        }

        stage('Sign Mac Applications') {
            steps {
                script {
                    sh "curl -o AspectModelEditorBackend-${env.version}.app -F file=@AspectModelEditorBackend.app -F entitlements=@entitlements.plist https://cbi.eclipse.org/macos/codesign/sign"
                    sh "ls -a"
                }
            }
        }

        stage('MacOS Notarization') {
            steps {
                script {
                    def macOsFile = "AspectModelEditorBackend-${env.version}.app"

                    def jsonOptions = "options={\"primaryBundleId\": \"org.eclipse.esmf\", \"staple\": true};type=application/json"

                    def response = sh(script: "curl -s -X POST -F file=@${macOsFile} -F '${jsonOptions}' https://cbi.eclipse.org/macos/xcrun/notarize", returnStdout: true).trim()

                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def object = jsonSlurper.parseText(response)
                    def uuid = object.uuid
                    def status = object.notarizationStatus.status

                    while (status == 'IN_PROGRESS') {
                        sleep(time: 1, unit: 'MINUTES')
                        response = sh(script: "curl -s https://cbi.eclipse.org/macos/xcrun/${uuid}/status", returnStdout: true).trim()
                        def inProgressResponse = jsonSlurper.parseText(response)
                        uuid = inProgressResponse.uuid
                        status = inProgressResponse.notarizationStatus.status
                    }

                    if (status != 'COMPLETE') {
                        echo "Notarization failed: ${response}"
                        error("Notarization failed.")
                    }

                    sh "rm '${macOsFile}'"

                    sh "curl -JO -o AspectModelEditorBackend-${env.version}.app https://cbi.eclipse.org/macos/xcrun/${uuid}/download"
                }
            }
        }

        stage('Release signed Windows and Mac artifact to GitHub Releases') {
            steps {
                script {
                    def repo = "eclipse-esmf/esmf-aspect-model-editor-backend"
                    def tagName = "v${env.version}"
                    def fileNameWin = "aspect-model-editor-v${env.version}-win-signed.zip"
                    def fileNameMac = "AspectModelEditorBackend-${env.version}.app"
                    def releaseId = ""

                    def tagExists = sh(script: """
                        curl -s -L \\
                             -H "Accept: application/vnd.github+json" \\
                             -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \\
                             https://api.github.com/repos/${repo}/git/refs/tags/${tagName} | jq -r '.ref'
                    """, returnStdout: true).trim()

                    if (tagExists == "null") {
                        // Tag does not exist, create a new one
                        releaseId = sh(script: """
                            curl -s -L \\
                                 -H "Accept: application/vnd.github+json" \\
                                 -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \\
                                 -X POST \\
                                 -d '{ "tag_name": "${tagName}", "name": "${tagName}", "body": "Release ${tagName}" }' \\
                                 https://api.github.com/repos/${repo}/releases | jq -r '.id'
                        """, returnStdout: true).trim()
                    } else {
                        // Tag exists, use the existing one
                        releaseId = sh(script: """
                            curl -s -L \\
                                 -H "Accept: application/vnd.github+json" \\
                                 -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \\
                                 https://api.github.com/repos/${repo}/releases/tags/${tagName} | jq -r '.id'
                        """, returnStdout: true).trim()
                    }

                    sh """
                    curl -L \
                         -X POST \
                         -H "Accept: application/vnd.github+json" \\
                         -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \
                         -H "Content-Type: application/octet-stream" \
                         --data-binary @${fileName} \
                         "https://uploads.github.com/repos/${repo}/releases/${releaseId}/assets?name=${fileNameWin}"
                    """

                    sh """
                    curl -L \
                         -X POST \
                         -H "Accept: application/vnd.github+json" \\
                         -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \
                         -H "Content-Type: application/octet-stream" \
                         --data-binary @${fileName} \
                         "https://uploads.github.com/repos/${repo}/releases/${releaseId}/assets?name=${fileNameMac}"
                    """

                    sh """
                    curl -X DELETE \
                         -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \
                         "https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/git/refs/heads/pre_release_configuration"
                    """
                }
            }
        }
    }
}
