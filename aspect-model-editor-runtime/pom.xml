<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2025 Robert Bosch Manufacturing Solutions GmbH
  ~
  ~ See the AUTHORS file(s) distributed with this work for
  ~ additional information regarding authorship.
  ~
  ~ This Source Code Form is subject to the terms of the Mozilla Public
  ~ License, v. 2.0. If a copy of the MPL was not distributed with this
  ~ file, You can obtain one at https://mozilla.org/MPL/2.0/.
  ~
  ~ SPDX-License-Identifier: MPL-2.0
  -->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <parent>
      <groupId>org.eclipse.esmf</groupId>
      <artifactId>aspect-model-editor-parent</artifactId>
      <version>DEV-SNAPSHOT</version>
   </parent>

   <artifactId>aspect-model-editor-runtime</artifactId>
   <name>ESMF Aspect Model Editor Runtime</name>

   <properties>
      <main.class>org.eclipse.esmf.ame.Application</main.class>
      <native-image-jar>${project.artifactId}-${project.version}</native-image-jar>
      <micronaut.aot.enabled>true</micronaut.aot.enabled>
      <micronaut.io.watch>false</micronaut.io.watch>
      <integration-test-port>5001</integration-test-port>
   </properties>

   <dependencies>
      <!-- Multi module dependencies -->
      <dependency>
         <groupId>org.eclipse.esmf</groupId>
         <artifactId>aspect-model-editor-core</artifactId>
      </dependency>
      <dependency>
         <groupId>org.eclipse.esmf</groupId>
         <artifactId>aspect-model-editor-web-core</artifactId>
      </dependency>
      <dependency>
         <groupId>org.eclipse.esmf</groupId>
         <artifactId>aspect-model-editor-web</artifactId>
      </dependency>
      <dependency>
         <groupId>org.eclipse.esmf</groupId>
         <artifactId>esmf-aspect-model-validator</artifactId>
      </dependency>

      <!-- Third party dependencies -->
      <dependency>
         <groupId>io.micronaut</groupId>
         <artifactId>micronaut-core</artifactId>
      </dependency>
      <dependency>
         <groupId>io.micronaut</groupId>
         <artifactId>micronaut-runtime</artifactId>
      </dependency>
      <dependency>
         <groupId>io.micronaut</groupId>
         <artifactId>micronaut-http-server-netty</artifactId>
      </dependency>
      <dependency>
         <groupId>io.micronaut</groupId>
         <artifactId>micronaut-http-client</artifactId>
         <scope>compile</scope>
      </dependency>
      <dependency>
         <groupId>io.micronaut</groupId>
         <artifactId>micronaut-inject</artifactId>
      </dependency>
      <dependency>
         <groupId>io.micronaut</groupId>
         <artifactId>micronaut-context</artifactId>
      </dependency>
      <dependency>
         <groupId>io.micronaut.serde</groupId>
         <artifactId>micronaut-serde-jackson</artifactId>
         <version>${micronaut.serialization.version}</version>
      </dependency>
      <dependency>
         <groupId>org.graalvm.sdk</groupId>
         <artifactId>graal-sdk</artifactId>
         <scope>provided</scope>
      </dependency>
      <dependency>
         <groupId>org.graalvm.nativeimage</groupId>
         <artifactId>svm</artifactId>
         <scope>provided</scope>
      </dependency>
      <dependency>
         <groupId>org.graalvm.truffle</groupId>
         <artifactId>truffle-api</artifactId>
      </dependency>
      <dependency>
         <groupId>jakarta.validation</groupId>
         <artifactId>jakarta.validation-api</artifactId>
      </dependency>
      <dependency>
         <groupId>org.graphper</groupId>
         <artifactId>graph-support-core</artifactId>
      </dependency>

      <!-- Third party testing dependencies -->
      <dependency>
         <groupId>io.micronaut.test</groupId>
         <artifactId>micronaut-test-junit5</artifactId>
         <scope>runtime</scope>
      </dependency>
      <dependency>
         <groupId>org.junit.jupiter</groupId>
         <artifactId>junit-jupiter-engine</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.junit.jupiter</groupId>
         <artifactId>junit-jupiter-params</artifactId>
         <scope>test</scope>
      </dependency>
   </dependencies>

   <build>
      <resources>
         <resource>
            <directory>src/main/resources</directory>
         </resource>
      </resources>
      <plugins>
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <configuration>
               <mainClass>${main.class}</mainClass>
            </configuration>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <configuration>
               <archive>
                  <manifest>
                     <mainClass>org.eclipse.esmf.ame.Application</mainClass>
                  </manifest>
               </archive>
               <excludes>
                  <exclude>org/eclipse/esmf/ame/buildtime/**</exclude>
               </excludes>
            </configuration>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <executions>
               <execution>
                  <phase>package</phase>
                  <goals>
                     <goal>shade</goal>
                  </goals>
                  <configuration>
                     <createDependencyReducedPom>false</createDependencyReducedPom>
                     <createSourcesJar>false</createSourcesJar>
                     <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                           <manifestEntries>
                              <Main-Class>org.eclipse.esmf.ame.Application</Main-Class>
                           </manifestEntries>
                        </transformer>
                     </transformers>
                     <artifactSet>
                        <excludes>
                           <!-- Duplicate annotations that are already contained in javax.annotation-api -->
                           <exclude>javax.annotation:jsr250-api</exclude>
                        </excludes>
                     </artifactSet>
                     <filters>
                        <filter>
                           <artifact>*:*</artifact>
                           <excludes>
                              <exclude>module-info.class</exclude>
                              <exclude>META-INF/*</exclude>
                              <exclude>META-INF/sisu/javax.inject.Named</exclude>
                              <exclude>META-INF/plexus/components.xml</exclude>
                              <exclude>META-INF.versions*/**</exclude>
                              <exclude>META-INF/versions*/**</exclude>
                              <exclude>META-INF/maven/**</exclude>
                              <exclude>plugin.xml</exclude>
                              <exclude>about.html</exclude>
                           </excludes>
                        </filter>
                        <filter>
                           <artifact>${project.groupId}:${project.artifactId}</artifact>
                           <excludeDefaults>false</excludeDefaults>
                           <includes>
                              <include>**</include>
                              <include>META-INF/**</include>
                              <include>git.properties</include>
                           </includes>
                           <excludes>
                              <!-- Explicitly exclude build-time-only code from jar -->
                              <exclude>org/eclipse/esmf/buildtime/**</exclude>
                           </excludes>
                        </filter>
                        <!-- Clashes with the files from xml-apis-ext -->
                        <filter>
                           <artifact>xml-apis:xml-apis</artifact>
                           <excludes>
                              <exclude>license/**</exclude>
                           </excludes>
                        </filter>
                        <!-- Clashes with the same file from batik-rasterizer -->
                        <filter>
                           <artifact>org.apache.xmlgraphics:batik-svgrasterizer</artifact>
                           <excludes>
                              <exclude>org/apache/batik/apps/rasterizer/resources/rasterizer.policy</exclude>
                           </excludes>
                        </filter>
                        <!-- These configs add lots of spurious GraalVM configuration -->
                        <filter>
                           <artifact>org.jboss.forge.roaster:roaster-jdt</artifact>
                           <excludes>
                              <exclude>META-INF/native-image/**</exclude>
                           </excludes>
                        </filter>
                        <!-- Required to have Model Instantiators available -->
                        <filter>
                           <artifact>org.eclipse.esmf:esmf-aspect-meta-model-java</artifact>
                           <includes>
                              <include>**</include>
                           </includes>
                        </filter>
                        <!-- Prevent overlapping classes from javax modules -->
                        <filter>
                           <artifact>jakarta.activation:jakarta.activation-api</artifact>
                           <excludes>
                              <exclude>**</exclude>
                           </excludes>
                        </filter>
                     </filters>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
               <annotationProcessorPaths combine.children="append">
                  <path>
                     <groupId>io.micronaut</groupId>
                     <artifactId>micronaut-http-validation</artifactId>
                     <version>${micronaut.core.version}</version>
                  </path>
                  <path>
                     <groupId>io.micronaut.serde</groupId>
                     <artifactId>micronaut-serde-processor</artifactId>
                     <version>${micronaut.serialization.version}</version>
                  </path>
                  <path>
                     <groupId>io.micronaut</groupId>
                     <artifactId>micronaut-inject-java</artifactId>
                     <version>${micronaut.version}</version>
                  </path>
                  <path>
                     <groupId>io.micronaut.validation</groupId>
                     <artifactId>micronaut-validation-processor</artifactId>
                     <version>${micronaut.validation.version}</version>
                  </path>
               </annotationProcessorPaths>
               <compilerArgs>
                  <arg>-Amicronaut.processing.group=org.eclipse.esmf.ame</arg>
                  <arg>-Amicronaut.processing.module=aspect-model-editor</arg>
               </compilerArgs>
               <showWarnings>false</showWarnings>
               <showDeprecation>false</showDeprecation>
            </configuration>
         </plugin>
      </plugins>
   </build>

   <profiles>
      <profile>
         <id>copy-font-configuration</id>
         <activation>
            <os>
               <family>windows</family>
            </os>
         </activation>
         <build>
            <plugins>
               <!-- Copy font configuration files from the GraalVM directory (pointed to by JAVA_HOME in native builds) to the output directory -->
               <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>wagon-maven-plugin</artifactId>
                  <executions>
                     <execution>
                        <id>copy-fontconfig-bfc</id>
                        <phase>process-resources</phase>
                        <goals>
                           <goal>download-single</goal>
                        </goals>
                        <configuration>
                           <url>file://${env.JAVA_HOME}/lib</url>
                           <fromFile>fontconfig.bfc</fromFile>
                           <toFile>${project.build.outputDirectory}/fontconfig.bfc</toFile>
                        </configuration>
                     </execution>
                  </executions>
               </plugin>
            </plugins>
         </build>
      </profile>
      <profile>
         <id>native-image</id>
         <build>
            <plugins>
               <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-clean-plugin</artifactId>
                  <inherited>false</inherited>
                  <configuration>
                     <filesets>
                        <fileset>
                           <directory>${relative-native-config-path}</directory>
                        </fileset>
                     </filesets>
                  </configuration>
               </plugin>

               <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <configuration>
                     <skip>false</skip>
                     <forkCount>1</forkCount>
                     <reuseForks>false</reuseForks>
                     <argLine>--add-exports org.graalvm.nativeimage/org.graalvm.nativeimage.impl=ALL-UNNAMED</argLine>
                     <argLine>-agentlib:native-image-agent=config-merge-dir=${native-config-path}</argLine>
                  </configuration>
               </plugin>
               <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-antrun-plugin</artifactId>
                  <executions>
                     <execution>
                        <id>copy-native-configs</id>
                        <phase>process-classes</phase>
                        <goals>
                           <goal>run</goal>
                        </goals>
                        <configuration>
                           <target>
                              <copy todir="${native-config-path}">
                                 <fileset dir="${native-config-dir-service}">
                                    <include name="**/*"/>
                                 </fileset>
                              </copy>
                              <echo message="Native configuration files have been copied to ${native-config-path}."/>
                           </target>
                        </configuration>
                     </execution>
                  </executions>
               </plugin>
               <plugin>
                  <groupId>org.graalvm.buildtools</groupId>
                  <artifactId>native-maven-plugin</artifactId>
                  <extensions>true</extensions>
                  <executions>
                     <execution>
                        <id>add-reachability-metadata</id>
                        <goals>
                           <goal>add-reachability-metadata</goal>
                        </goals>
                     </execution>
                     <execution>
                        <id>build-native</id>
                        <goals>
                           <goal>compile</goal>
                        </goals>
                        <phase>prepare-package</phase>
                     </execution>
                  </executions>
                  <configuration>
                     <mainClass>${main.class}</mainClass>
                     <imageName>ame-backend-${project.version}-${os.platform}</imageName>
                     <verbose>true</verbose>
                     <buildArgs>
                        <arg>--verbose</arg>
                        <arg>-H:EnableURLProtocols=http,https</arg>
                        <arg>--enable-https</arg>
                        <arg>--no-fallback</arg>
                        <arg>-march=compatibility</arg>
                        <arg>-H:-DeadlockWatchdogExitOnTimeout</arg>
                        <arg>-H:DeadlockWatchdogInterval=0</arg>
                        <arg>-H:+AddAllCharsets</arg>
                        <arg>-H:+ReportExceptionStackTraces</arg>
                        <arg>-H:+PrintClassInitialization</arg>
                        <arg>-J-XX:MaxRAMPercentage=90.0</arg>
                        <arg>-J-XX:GCTimeRatio=19</arg>
                        <arg>--report-unsupported-elements-at-runtime</arg>
                        <arg>--features=org.eclipse.esmf.ame.nativefeatures.AmeFeature</arg>
                        <arg>-H:ConfigurationFileDirectories=${relative-native-config-path}</arg>
                        <arg>-H:IncludeResourceBundles=org.apache.jena.ext.xerces.impl.msg.XMLSchemaMessages</arg>
                        <arg>-J--add-exports=java.desktop/sun.awt=ALL-UNNAMED</arg>
                        <arg>-J--add-exports=java.desktop/sun.font=ALL-UNNAMED</arg>
                        <arg>-J--add-exports=org.graalvm.nativeimage.builder/com.oracle.svm.core.configure=ALL-UNNAMED</arg>
                        <arg>-J--add-exports=org.graalvm.nativeimage.builder/com.oracle.svm.core.jni=ALL-UNNAMED</arg>
                        <arg>--initialize-at-build-time=org.eclipse.esmf.nativefeatures.Native</arg>
                        <arg>--initialize-at-run-time=org.graphper.api.attributes.Layout</arg>
                     </buildArgs>
                     <quickBuild>true</quickBuild>
                  </configuration>
               </plugin>
            </plugins>
         </build>
      </profile>
      <profile>
         <id>dependencies-for-integration-tests</id>
         <build>
            <plugins>
               <!-- Make sure Bruno is available -->
               <plugin>
                  <groupId>com.github.eirslett</groupId>
                  <artifactId>frontend-maven-plugin</artifactId>
                  <executions>
                     <execution>
                        <id>install-node-and-npm</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                           <goal>install-node-and-npm</goal>
                        </goals>
                        <configuration>
                           <nodeVersion>v${node-version}</nodeVersion>
                           <npmVersion>${npm-version}</npmVersion>
                           <installDirectory>${project.build.directory}</installDirectory>
                        </configuration>
                     </execution>
                     <execution>
                        <id>install-bruno-cli</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                           <goal>npm</goal>
                        </goals>
                        <configuration>
                           <workingDirectory>${project.build.directory}</workingDirectory>
                           <arguments>install . @usebruno/cli</arguments>
                        </configuration>
                     </execution>
                  </executions>
               </plugin>
               <!-- Copy Bruno files into build directory.
                                  This is required so that the target URL may be dynamically
                                  replaced within the Bruno environment. -->
               <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-resources-plugin</artifactId>
                  <executions>
                     <execution>
                        <id>copy-resources</id>
                        <phase>process-test-resources</phase>
                        <goals>
                           <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                           <outputDirectory>${project.build.outputDirectory}/${bruno.directory}
                           </outputDirectory>
                           <resources>
                              <resource>
                                 <directory>${bruno.directory}</directory>
                              </resource>
                           </resources>
                        </configuration>
                     </execution>
                  </executions>
               </plugin>
               <plugin>
                  <groupId>org.sonatype.plugins</groupId>
                  <artifactId>port-allocator-maven-plugin</artifactId>
                  <dependencies>
                     <dependency>
                        <groupId>classworlds</groupId>
                        <artifactId>classworlds</artifactId>
                        <version>${classworlds-version}</version>
                     </dependency>
                  </dependencies>
                  <executions>
                     <execution>
                        <phase>pre-integration-test</phase>
                        <goals>
                           <goal>allocate-ports</goal>
                        </goals>
                        <configuration>
                           <ports>
                              <port>
                                 <name>integration-test-port</name>
                              </port>
                           </ports>
                        </configuration>
                     </execution>
                  </executions>
               </plugin>
               <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-antrun-plugin</artifactId>
                  <executions>
                     <!-- Adjust Bruno environment target URL -->
                     <execution>
                        <id>adjust-bruno-target-url</id>
                        <phase>pre-integration-test</phase>
                        <configuration>
                           <target>
                              <replaceregexp
                                    file="${project.build.outputDirectory}/${bruno.directory}/environments/${bruno.test.environment}"
                                    match="9090" replace="${integration-test-port}" byline="true"/>
                           </target>
                        </configuration>
                        <goals>
                           <goal>run</goal>
                        </goals>
                     </execution>
                  </executions>
               </plugin>
            </plugins>
         </build>
      </profile>
      <profile>
         <id>start-windows-native-image-for-integration-tests</id>
         <build>
            <plugins>
               <plugin>
                  <groupId>com.bazaarvoice.maven.plugins</groupId>
                  <artifactId>process-exec-maven-plugin</artifactId>
                  <executions>
                     <!--Start process-->
                     <execution>
                        <id>start-native-image-process</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                           <goal>start</goal>
                        </goals>
                        <configuration>
                           <workingDir>${project.build.directory}</workingDir>
                           <arguments>
                              <argument>cmd</argument>
                              <argument>/C</argument>
                              <argument>ame-backend-${project.version}-${os.platform}</argument>
                              <argument>-Dmicronaut.server.port=${integration-test-port}</argument>
                           </arguments>
                        </configuration>
                     </execution>
                     <!--Stop Process-->
                     <execution>
                        <id>stop-native-image-process</id>
                        <phase>post-integration-test</phase>
                        <goals>
                           <goal>stop-all</goal>
                        </goals>
                     </execution>
                  </executions>
               </plugin>
            </plugins>
         </build>
      </profile>
      <profile>
         <id>start-unix-native-image-for-integration-tests</id>
         <build>
            <plugins>
               <plugin>
                  <groupId>com.bazaarvoice.maven.plugins</groupId>
                  <artifactId>process-exec-maven-plugin</artifactId>
                  <executions>
                     <!--Start process-->
                     <execution>
                        <id>start-native-image-process</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                           <goal>start</goal>
                        </goals>
                        <configuration>
                           <workingDir>${project.build.directory}</workingDir>
                           <arguments>
                              <argument>./ame-backend-${project.version}-${os.platform}</argument>
                              <argument>-Dmicronaut.server.port=${integration-test-port}</argument>
                           </arguments>
                        </configuration>
                     </execution>
                     <!--Stop Process-->
                     <execution>
                        <id>stop-native-image-process</id>
                        <phase>post-integration-test</phase>
                        <goals>
                           <goal>stop-all</goal>
                        </goals>
                     </execution>
                  </executions>
               </plugin>
            </plugins>
         </build>
      </profile>
      <profile>
         <id>run-bruno-integration-tests</id>
         <build>
            <plugins>
               <!-- Run Bruno collections against deployed integration instance -->
               <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>exec-maven-plugin</artifactId>
                  <inherited>false</inherited>
                  <executions>
                     <execution>
                        <id>run-bruno-integration-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                           <goal>exec</goal>
                        </goals>
                        <configuration>
                           <executable>${node.path}</executable>
                           <workingDirectory>${project.build.outputDirectory}/${bruno.directory}</workingDirectory>
                           <commandlineArgs>
                              ${project.build.directory}/node_modules/@usebruno/cli/bin/bru.js
                              run . --env AmeEnv
                           </commandlineArgs>
                        </configuration>
                     </execution>
                  </executions>
               </plugin>
            </plugins>
         </build>
      </profile>
   </profiles>
</project>
